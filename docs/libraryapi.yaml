openapi: 3.0.1
info:
  title: Library Api
  description: Api de Biblioteca (Actividad de aprendizaje Javier Vizcaino 2ÂºDAM)
  version: "1.0"
servers:
  - url: https://api.library.com
paths:
  "/user/{userId}":
    parameters:
      - $ref: '#/components/parameters/UserId'
      - $ref: '#/components/parameters/isMember'
      - $ref: '#/components/parameters/code'
    get:
      tags:
        - Users
      summary: Obtiene la informacion de un usuario determinado
      description: Obtiene la informacion de un usuario cuyo id se pasa en la URL
      operationId: getUser
      responses:
        "200":
          description: Se devuelve el usuario solicitado correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Users
      summary: Modifica la informacion de un usuario determinado
      description: Modifica la informacion de un usuario cuyo id se pasa en la URL
      operationId: modifyUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDTO"
        required: true
      responses:
        "200":
          description: Usuario actualizado correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Users
      summary: Elimina la informacion de un usuario determinado
      description: Elimina la informacion de un usuario cuyo id se pasa en la URL
      operationId: deleteUser
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Users
      summary: Modifica la informacion de un atributo de un usuario determinado
      description: Modifica la informacion de un campo de un usuario cuyo id se pasa en la URL
      operationId: patchUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/UserDTO"

        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users:
    parameters:
      - $ref: '#/components/parameters/UserId'
      - $ref: '#/components/parameters/isMember'
      - $ref: '#/components/parameters/code'
    get:
      tags:
        - Users
      summary: Obtiene la informacion de todos los usuarios
      description: Obtiene la informacion de todos los usuarios
      operationId: getUsers
      responses:
        '200':
          description: Se devuelve el listado de usuarios correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDTO"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Users
      summary: Registro de usuarios
      description: Registra un nuevo usuario
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        '400':
          $ref: '#/components/responses/BadRequest'

        '500':
          $ref: '#/components/responses/InternalServerError'

  /books:
    parameters:
      - $ref: '#/components/parameters/BookId'
      - $ref: '#/components/parameters/hasStock'
      - $ref: '#/components/parameters/title'
    get:
      tags:
        - Books
      summary: Lista de Libros
      description: Obtiene la informacion de todos los libros de la biblioteca
      operationId: getBooks

      responses:
        '200':
          description: Se devuelve el listado de libros correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookInformation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Books
      summary: Registro de libros
      description: Registra un nuevo libro en la biblioteca
      operationId: addBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookInformation"
        required: true
      responses:
        '201':
          description: El libro se ha registrado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookInDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  "/book/{bookId}":
    parameters:
      - $ref: '#/components/parameters/BookId'
      - $ref: '#/components/parameters/hasStock'
      - $ref: '#/components/parameters/title'
    get:
      tags:
        - Books
      operationId: getBook
      responses:
        '200':
          description: Se devuelve la informacion del bus
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookInformation"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Books
      operationId: modifyBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookInformation"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookInformation"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Books
      operationId: deleteBook
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Books
      operationId: patchBook
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookInformation"
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  "/stock/{stockId}":
    parameters:
      - $ref: '#/components/parameters/StockId'
      - $ref: '#/components/parameters/isAvailable'
      - $ref: '#/components/parameters/code'
    get:
      tags:
        - Stocks
      operationId: getStock
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stock"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Stocks
      operationId: modifyStock
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stock"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stock"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Stocks
      operationId: deleteStock
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Stocks
      operationId: patchStock
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              format: int32
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stock"
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /stocks:
    parameters:
      - $ref: '#/components/parameters/StockId'
      - $ref: '#/components/parameters/isAvailable'
      - $ref: '#/components/parameters/code'
    get:
      tags:
        - Stocks
      operationId: getStocks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Stock"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Stocks
      operationId: addStock
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stock"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stock"
        '400':
          $ref: '#/components/responses/BadRequest'

        '500':
          $ref: '#/components/responses/InternalServerError'

  "/rent/{rentId}":
    parameters:
      - $ref: '#/components/parameters/RentId'
      - $ref: '#/components/parameters/returned'
      - $ref: '#/components/parameters/code'
    get:
      tags:
        - Rents
      operationId: getRent
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rent"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Rents
      operationId: modifyRent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Rent"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rent"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Rents
      operationId: deleteRent
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Rents
      operationId: patchRent
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rent"
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /rents:
    parameters:
      - $ref: '#/components/parameters/RentId'
      - $ref: '#/components/parameters/returned'
      - $ref: '#/components/parameters/code'
    get:
      tags:
        - Rents
      operationId: getRents
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Rent"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Rents
      operationId: addRent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RentDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rent"
        '400':
          $ref: '#/components/responses/BadRequest'

        '500':
          $ref: '#/components/responses/InternalServerError'

  "/notice/{noticeId}":
    parameters:
      - $ref: '#/components/parameters/noticeId'
      - $ref: '#/components/parameters/hasRead'
      - $ref: '#/components/parameters/titleNotice'
    get:
      tags:
        - Notices
      operationId: getNotice
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notice"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Notices
      operationId: modifyNotice
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Notice"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notice"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Notices
      operationId: deleteNotice
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Notices
      operationId: patchNotice
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookInformation"
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /notices:
    parameters:
      - $ref: '#/components/parameters/noticeId'
      - $ref: '#/components/parameters/hasRead'
      - $ref: '#/components/parameters/titleNotice'
    get:
      tags:
        - Notices
      operationId: getNotices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notice"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Notices
      operationId: addNotice
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Notice"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notice"
        '400':
          $ref: '#/components/responses/BadRequest'

        '500':
          $ref: '#/components/responses/InternalServerError'
  /libraries:
    parameters:
      - $ref: '#/components/parameters/libraryId'
      - $ref: '#/components/parameters/verify'
      - $ref: '#/components/parameters/city'
    get:
      tags:
        - Libraries
      operationId: getLibraries
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Library"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Libraries
      operationId: addLibrary
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Library"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Library"
        '400':
          $ref: '#/components/responses/BadRequest'

        '500':
          $ref: '#/components/responses/InternalServerError'


  "/library/{libraryId}":
    parameters:
      - $ref: '#/components/parameters/libraryId'
      - $ref: '#/components/parameters/verify'
      - $ref: '#/components/parameters/city'
    get:
      tags:
        - Libraries
      operationId: getLibrary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Library"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Libraries
      operationId: deleteLibrary
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/Notfound'
        '500':
          $ref: '#/components/responses/InternalServerError'


components:
  schemas:
    InternalServerError:
      type: object
      properties:
        code:
          type: string
          description: codigo de estado
          example: 500
        message:
          type: string
          description: Mensaje de error
          example: Internal Server Error

    BadRequest:
      type: object
      properties:
        code:
          type: string
          description: codigo de estado
          example: 400
        message:
          type: string
          description: Mensaje de error
          example: Error de validacion
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorField'

    ErrorField:
      type: object
      description: Error de validacion en un campo de entrada
      properties:
        fieldName:
          type: string
          description: El campo donde se ha producido el error
          example: title
        message:
          type: string
          description: Mensaje de error asociado con el campo
          example: title is obligatory

    NotFound:
      type: object
      properties:
        code:
          type: string
          description: codigo de estado
          example: 404
        message:
          type: string
          description: Mensaje de error
          example: Book not found

    UserDTO:
      type: object
      properties:
        id:
          type: integer
          description: User ID
          example: 1
        code:
          type: string
          description: Codigo del usuario
          example: A1
        name:
          type: string
          description: Nombre del usuario
          example: Jose
        lastname:
          type: string
          description: Apellido del usuario
          example: Salinas
        address:
          type: string
          description: Direccion del usuario
          example: Paseo Independencia
        birthdate:
          type: date
          description: Fecha de nacimiento
          example: 02/5/1990
        isMember:
          type: boolean
          description: Indica si el usuario es miembro o no del club de la biblioteca
          example: true

    BookInDTO:
      type: object
      properties:
        id:
          type: integer
          description: Book ID
          example: 1
        code:
          type: string
          description: Codigo del libro
          example: A1
        title:
          type: string
          description: Titulo del libro
          example: El seÃ±or de los anillos
        author:
          type: string
          description: Autor del libro
          example: J.R.R Tolkien
        genre:
          type: string
          description: Genero del libro
          example: Ciencia Ficcion
        hasStock:
          type: boolean
          description: Si tiene stock o no
          example: true

    BookInformation:
      type: object
      allOf:
        - $ref: '#/components/schemas/BookInDTO'
      properties:
        year:
          type: date
          description: Fecha de publicacion
          example: 15/03/2023
        pages:
          type: integer
          description: Paginas del libro
          example: 200
        price:
          type: integer
          description: Precio del libro
          example: 20

    Notice:
      required:
        - code
        - description
        - hasRead
        - titleNotice
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        titleNotice:
          type: string
        description:
          type: string
        dateSendNotice:
          type: string
          format: date
        rating:
          type: number
          format: float
        hasRead:
          type: boolean
        bookId:
          type: integer
          format: int64
        userNotices:
          $ref: "#/components/schemas/User"
        rents:
          type: array
          items:
            $ref: "#/components/schemas/Rent"
        books:
          type: array
          items:
            $ref: "#/components/schemas/BookInformation"
    Rent:
      required:
        - code
        - returned
        - totalPrice
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        startRent:
          type: string
          format: date
        endRent:
          type: string
          format: date
        totalPrice:
          type: number
          format: float
        book:
          type: array
          items:
            $ref: "#/components/schemas/BookInformation"
        user:
          type: array
          items:
            $ref: "#/components/schemas/User"
        notices:
          type: array
          items:
            $ref: "#/components/schemas/Notice"
        returned:
          type: boolean
    Stock:
      required:
        - code
        - isAvailable
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        isAvailable:
          type: boolean
        quantity:
          type: integer
          format: int32
        books:
          type: array
          items:
            $ref: "#/components/schemas/BookInformation"
    User:
      required:
        - address
        - code
        - email
        - lastName
        - member
        - name
        - phoneNumber
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        name:
          type: string
        lastName:
          type: string
        address:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        birthdate:
          type: string
          format: date
        userRents:
          $ref: "#/components/schemas/Rent"
        noticeUser:
          type: array
          items:
            $ref: "#/components/schemas/Notice"
        member:
          type: boolean
    RentDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
        code:
          type: string
        startRent:
          type: string
          format: date
        endRent:
          type: string
          format: date
        userId:
          type: integer
          format: int64
        totalPrice:
          type: number
          format: float
        bookId:
          type: integer
          format: int64
        returned:
          type: boolean
    Library:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        city:
          type: string
        verify:
          type: boolean
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double

  responses:
    NoContent:
      description: No Content
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerError'
      description: Internal Server Error

    Notfound:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
          example:
            errorCode: 102
            message: "Recurso no encontrado"

    BadRequest:
      description: Error de validacion
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequest'

  parameters:
    BookId:
      name: bookId
      in: path
      description: CÃ³digo del libro
      required: true
      schema:
        type: number
        format: int64
    UserId:
      name: userId
      in: path
      description: Identificador de usuario
      required: true
      schema:
        type: number
        format: int64
    isMember:
      name: isMember
      in: query
      description: Indica si el usuario es miembro
      required: false
      schema:
        type: boolean
        default: false
    hasStock:
      name: hasStock
      in: query
      description: Indica si el libro tiene Stock
      required: false
      schema:
        type: boolean
        default: false
    title:
      name: title
      in: query
      description: Realiza un filtrado por el campo "titulo" y devuelve los resultados que contengan ese titulo.
      required: false
      schema:
        type: string
        default: Prueba
